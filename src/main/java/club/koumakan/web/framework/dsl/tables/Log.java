/*
 * This file is generated by jOOQ.
 */
package club.koumakan.web.framework.dsl.tables;


import club.koumakan.web.framework.dsl.Indexes;
import club.koumakan.web.framework.dsl.Keys;
import club.koumakan.web.framework.dsl.Public;
import club.koumakan.web.framework.dsl.tables.records.LogRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = {
    "http://www.jooq.org",
    "jOOQ version:3.12.3"
  },
  comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Log extends TableImpl<LogRecord> {

  /**
   * The reference instance of <code>public.log</code>
   */
  public static final Log LOG = new Log();
  private static final long serialVersionUID = -255562944;
  /**
   * The column <code>public.log.id</code>.
   */
  public final TableField<LogRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('log_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");
  /**
   * The column <code>public.log.type</code>.
   */
  public final TableField<LogRecord, Short> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");
  /**
   * The column <code>public.log.message</code>.
   */
  public final TableField<LogRecord, String> MESSAGE = createField(DSL.name("message"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");
  /**
   * The column <code>public.log.create_time</code>.
   */
  public final TableField<LogRecord, Long> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

  /**
   * Create a <code>public.log</code> table reference
   */
  public Log() {
    this(DSL.name("log"), null);
  }

  /**
   * Create an aliased <code>public.log</code> table reference
   */
  public Log(String alias) {
    this(DSL.name(alias), LOG);
  }

  /**
   * Create an aliased <code>public.log</code> table reference
   */
  public Log(Name alias) {
    this(alias, LOG);
  }

  private Log(Name alias, Table<LogRecord> aliased) {
    this(alias, aliased, null);
  }

  private Log(Name alias, Table<LogRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Log(Table<O> child, ForeignKey<O, LogRecord> key) {
    super(child, key, LOG);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<LogRecord> getRecordType() {
    return LogRecord.class;
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.LOG_PKEY);
  }

  @Override
  public Identity<LogRecord, Long> getIdentity() {
    return Keys.IDENTITY_LOG;
  }

  @Override
  public UniqueKey<LogRecord> getPrimaryKey() {
    return Keys.LOG_PKEY;
  }

  @Override
  public List<UniqueKey<LogRecord>> getKeys() {
    return Arrays.<UniqueKey<LogRecord>>asList(Keys.LOG_PKEY);
  }

  @Override
  public Log as(String alias) {
    return new Log(DSL.name(alias), this);
  }

  @Override
  public Log as(Name alias) {
    return new Log(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Log rename(String name) {
    return new Log(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Log rename(Name name) {
    return new Log(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<Long, Short, String, Long> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
