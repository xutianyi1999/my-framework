/*
 * This file is generated by jOOQ.
 */
package club.koumakan.web.framework.dsl.tables;


import club.koumakan.web.framework.dsl.Indexes;
import club.koumakan.web.framework.dsl.Keys;
import club.koumakan.web.framework.dsl.Public;
import club.koumakan.web.framework.dsl.tables.records.UserRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = {
    "http://www.jooq.org",
    "jOOQ version:3.12.3"
  },
  comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class User extends TableImpl<UserRecord> {

  /**
   * The reference instance of <code>public.user</code>
   */
  public static final User USER = new User();
  private static final long serialVersionUID = -1409585782;
  /**
   * The column <code>public.user.id</code>.
   */
  public final TableField<UserRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('user_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");
  /**
   * The column <code>public.user.username</code>.
   */
  public final TableField<UserRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");
  /**
   * The column <code>public.user.password</code>.
   */
  public final TableField<UserRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");
  /**
   * The column <code>public.user.email</code>.
   */
  public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");
  /**
   * The column <code>public.user.create_time</code>.
   */
  public final TableField<UserRecord, Long> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");
  /**
   * The column <code>public.user.role_id</code>.
   */
  public final TableField<UserRecord, Long> ROLE_ID = createField(DSL.name("role_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");
  /**
   * The column <code>public.user.status</code>.
   */
  public final TableField<UserRecord, String> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

  /**
   * Create a <code>public.user</code> table reference
   */
  public User() {
    this(DSL.name("user"), null);
  }

  /**
   * Create an aliased <code>public.user</code> table reference
   */
  public User(String alias) {
    this(DSL.name(alias), USER);
  }

  /**
   * Create an aliased <code>public.user</code> table reference
   */
  public User(Name alias) {
    this(alias, USER);
  }

  private User(Name alias, Table<UserRecord> aliased) {
    this(alias, aliased, null);
  }

  private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
    super(child, key, USER);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<UserRecord> getRecordType() {
    return UserRecord.class;
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.USER_EMAIL_KEY, Indexes.USER_PKEY, Indexes.USER_USERNAME_KEY);
  }

  @Override
  public Identity<UserRecord, Long> getIdentity() {
    return Keys.IDENTITY_USER;
  }

  @Override
  public UniqueKey<UserRecord> getPrimaryKey() {
    return Keys.USER_PKEY;
  }

  @Override
  public List<UniqueKey<UserRecord>> getKeys() {
    return Arrays.<UniqueKey<UserRecord>>asList(Keys.USER_PKEY, Keys.USER_USERNAME_KEY, Keys.USER_EMAIL_KEY);
  }

  @Override
  public User as(String alias) {
    return new User(DSL.name(alias), this);
  }

  @Override
  public User as(Name alias) {
    return new User(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public User rename(String name) {
    return new User(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public User rename(Name name) {
    return new User(name, null);
  }

  // -------------------------------------------------------------------------
  // Row7 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row7<Long, String, String, String, Long, Long, String> fieldsRow() {
    return (Row7) super.fieldsRow();
  }
}
