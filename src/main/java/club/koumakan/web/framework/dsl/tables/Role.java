/*
 * This file is generated by jOOQ.
 */
package club.koumakan.web.framework.dsl.tables;


import club.koumakan.web.framework.dsl.Indexes;
import club.koumakan.web.framework.dsl.Keys;
import club.koumakan.web.framework.dsl.Public;
import club.koumakan.web.framework.dsl.tables.records.RoleRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = {
    "http://www.jooq.org",
    "jOOQ version:3.12.3"
  },
  comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Role extends TableImpl<RoleRecord> {

  /**
   * The reference instance of <code>public.role</code>
   */
  public static final Role ROLE = new Role();
  private static final long serialVersionUID = -199314075;
  /**
   * The column <code>public.role.id</code>.
   */
  public final TableField<RoleRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('role_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");
  /**
   * The column <code>public.role.name</code>.
   */
  public final TableField<RoleRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");
  /**
   * The column <code>public.role.code</code>.
   */
  public final TableField<RoleRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

  /**
   * Create a <code>public.role</code> table reference
   */
  public Role() {
    this(DSL.name("role"), null);
  }

  /**
   * Create an aliased <code>public.role</code> table reference
   */
  public Role(String alias) {
    this(DSL.name(alias), ROLE);
  }

  /**
   * Create an aliased <code>public.role</code> table reference
   */
  public Role(Name alias) {
    this(alias, ROLE);
  }

  private Role(Name alias, Table<RoleRecord> aliased) {
    this(alias, aliased, null);
  }

  private Role(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> Role(Table<O> child, ForeignKey<O, RoleRecord> key) {
    super(child, key, ROLE);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<RoleRecord> getRecordType() {
    return RoleRecord.class;
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.ROLE_CODE_KEY, Indexes.ROLE_NAME_KEY, Indexes.ROLE_PKEY);
  }

  @Override
  public Identity<RoleRecord, Long> getIdentity() {
    return Keys.IDENTITY_ROLE;
  }

  @Override
  public UniqueKey<RoleRecord> getPrimaryKey() {
    return Keys.ROLE_PKEY;
  }

  @Override
  public List<UniqueKey<RoleRecord>> getKeys() {
    return Arrays.<UniqueKey<RoleRecord>>asList(Keys.ROLE_PKEY, Keys.ROLE_NAME_KEY, Keys.ROLE_CODE_KEY);
  }

  @Override
  public Role as(String alias) {
    return new Role(DSL.name(alias), this);
  }

  @Override
  public Role as(Name alias) {
    return new Role(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public Role rename(String name) {
    return new Role(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Role rename(Name name) {
    return new Role(name, null);
  }

  // -------------------------------------------------------------------------
  // Row3 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row3<Long, String, String> fieldsRow() {
    return (Row3) super.fieldsRow();
  }
}
