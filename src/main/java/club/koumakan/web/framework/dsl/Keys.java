/*
 * This file is generated by jOOQ.
 */
package club.koumakan.web.framework.dsl;


import club.koumakan.web.framework.dsl.tables.DataDictionary;
import club.koumakan.web.framework.dsl.tables.Log;
import club.koumakan.web.framework.dsl.tables.Role;
import club.koumakan.web.framework.dsl.tables.User;
import club.koumakan.web.framework.dsl.tables.records.DataDictionaryRecord;
import club.koumakan.web.framework.dsl.tables.records.LogRecord;
import club.koumakan.web.framework.dsl.tables.records.RoleRecord;
import club.koumakan.web.framework.dsl.tables.records.UserRecord;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import javax.annotation.processing.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables of
 * the <code>public</code> schema.
 */
@Generated(
  value = {
    "http://www.jooq.org",
    "jOOQ version:3.12.3"
  },
  comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keys {

  // -------------------------------------------------------------------------
  // IDENTITY definitions
  // -------------------------------------------------------------------------

  public static final Identity<DataDictionaryRecord, Long> IDENTITY_DATA_DICTIONARY = Identities0.IDENTITY_DATA_DICTIONARY;
  public static final Identity<LogRecord, Long> IDENTITY_LOG = Identities0.IDENTITY_LOG;
  public static final Identity<RoleRecord, Long> IDENTITY_ROLE = Identities0.IDENTITY_ROLE;
  public static final Identity<UserRecord, Long> IDENTITY_USER = Identities0.IDENTITY_USER;

  // -------------------------------------------------------------------------
  // UNIQUE and PRIMARY KEY definitions
  // -------------------------------------------------------------------------

  public static final UniqueKey<DataDictionaryRecord> DATA_DICTIONARY_PKEY = UniqueKeys0.DATA_DICTIONARY_PKEY;
  public static final UniqueKey<DataDictionaryRecord> DATA_DICTIONARY_CODE_KEY = UniqueKeys0.DATA_DICTIONARY_CODE_KEY;
  public static final UniqueKey<DataDictionaryRecord> DATA_DICTIONARY_NAME_KEY = UniqueKeys0.DATA_DICTIONARY_NAME_KEY;
  public static final UniqueKey<LogRecord> LOG_PKEY = UniqueKeys0.LOG_PKEY;
  public static final UniqueKey<RoleRecord> ROLE_PKEY = UniqueKeys0.ROLE_PKEY;
  public static final UniqueKey<RoleRecord> ROLE_NAME_KEY = UniqueKeys0.ROLE_NAME_KEY;
  public static final UniqueKey<RoleRecord> ROLE_CODE_KEY = UniqueKeys0.ROLE_CODE_KEY;
  public static final UniqueKey<UserRecord> USER_PKEY = UniqueKeys0.USER_PKEY;
  public static final UniqueKey<UserRecord> USER_USERNAME_KEY = UniqueKeys0.USER_USERNAME_KEY;
  public static final UniqueKey<UserRecord> USER_EMAIL_KEY = UniqueKeys0.USER_EMAIL_KEY;

  // -------------------------------------------------------------------------
  // FOREIGN KEY definitions
  // -------------------------------------------------------------------------


  // -------------------------------------------------------------------------
  // [#1459] distribute members to avoid static initialisers > 64kb
  // -------------------------------------------------------------------------

  private static class Identities0 {
    public static Identity<DataDictionaryRecord, Long> IDENTITY_DATA_DICTIONARY = Internal.createIdentity(DataDictionary.DATA_DICTIONARY, DataDictionary.DATA_DICTIONARY.ID);
    public static Identity<LogRecord, Long> IDENTITY_LOG = Internal.createIdentity(Log.LOG, Log.LOG.ID);
    public static Identity<RoleRecord, Long> IDENTITY_ROLE = Internal.createIdentity(Role.ROLE, Role.ROLE.ID);
    public static Identity<UserRecord, Long> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
  }

  private static class UniqueKeys0 {
    public static final UniqueKey<DataDictionaryRecord> DATA_DICTIONARY_PKEY = Internal.createUniqueKey(DataDictionary.DATA_DICTIONARY, "data_dictionary_pkey", DataDictionary.DATA_DICTIONARY.ID);
    public static final UniqueKey<DataDictionaryRecord> DATA_DICTIONARY_CODE_KEY = Internal.createUniqueKey(DataDictionary.DATA_DICTIONARY, "data_dictionary_code_key", DataDictionary.DATA_DICTIONARY.CODE);
    public static final UniqueKey<DataDictionaryRecord> DATA_DICTIONARY_NAME_KEY = Internal.createUniqueKey(DataDictionary.DATA_DICTIONARY, "data_dictionary_name_key", DataDictionary.DATA_DICTIONARY.NAME);
    public static final UniqueKey<LogRecord> LOG_PKEY = Internal.createUniqueKey(Log.LOG, "log_pkey", Log.LOG.ID);
    public static final UniqueKey<RoleRecord> ROLE_PKEY = Internal.createUniqueKey(Role.ROLE, "role_pkey", Role.ROLE.ID);
    public static final UniqueKey<RoleRecord> ROLE_NAME_KEY = Internal.createUniqueKey(Role.ROLE, "role_name_key", Role.ROLE.NAME);
    public static final UniqueKey<RoleRecord> ROLE_CODE_KEY = Internal.createUniqueKey(Role.ROLE, "role_code_key", Role.ROLE.CODE);
    public static final UniqueKey<UserRecord> USER_PKEY = Internal.createUniqueKey(User.USER, "user_pkey", User.USER.ID);
    public static final UniqueKey<UserRecord> USER_USERNAME_KEY = Internal.createUniqueKey(User.USER, "user_username_key", User.USER.USERNAME);
    public static final UniqueKey<UserRecord> USER_EMAIL_KEY = Internal.createUniqueKey(User.USER, "user_email_key", User.USER.EMAIL);
  }
}
