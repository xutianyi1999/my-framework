/*
 * This file is generated by jOOQ.
 */
package club.koumakan.web.framework.dsl.tables.records;


import club.koumakan.web.framework.dsl.tables.Log;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = {
    "http://www.jooq.org",
    "jOOQ version:3.12.3"
  },
  comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LogRecord extends UpdatableRecordImpl<LogRecord> implements Record4<Long, Short, String, Long> {

  private static final long serialVersionUID = 1070330602;

  /**
   * Create a detached LogRecord
   */
  public LogRecord() {
    super(Log.LOG);
  }

  /**
   * Create a detached, initialised LogRecord
   */
  public LogRecord(Long id, Short type, String message, Long createTime) {
    super(Log.LOG);

    set(0, id);
    set(1, type);
    set(2, message);
    set(3, createTime);
  }

  /**
   * Getter for <code>public.log.id</code>.
   */
  public Long getId() {
    return (Long) get(0);
  }

  /**
   * Setter for <code>public.log.id</code>.
   */
  public void setId(Long value) {
    set(0, value);
  }

  /**
   * Getter for <code>public.log.type</code>.
   */
  public Short getType() {
    return (Short) get(1);
  }

  /**
   * Setter for <code>public.log.type</code>.
   */
  public void setType(Short value) {
    set(1, value);
  }

  /**
   * Getter for <code>public.log.message</code>.
   */
  public String getMessage() {
    return (String) get(2);
  }

  /**
   * Setter for <code>public.log.message</code>.
   */
  public void setMessage(String value) {
    set(2, value);
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------

  /**
   * Getter for <code>public.log.create_time</code>.
   */
  public Long getCreateTime() {
    return (Long) get(3);
  }

  // -------------------------------------------------------------------------
  // Record4 type implementation
  // -------------------------------------------------------------------------

  /**
   * Setter for <code>public.log.create_time</code>.
   */
  public void setCreateTime(Long value) {
    set(3, value);
  }

  @Override
  public Record1<Long> key() {
    return (Record1) super.key();
  }

  @Override
  public Row4<Long, Short, String, Long> fieldsRow() {
    return (Row4) super.fieldsRow();
  }

  @Override
  public Row4<Long, Short, String, Long> valuesRow() {
    return (Row4) super.valuesRow();
  }

  @Override
  public Field<Long> field1() {
    return Log.LOG.ID;
  }

  @Override
  public Field<Short> field2() {
    return Log.LOG.TYPE;
  }

  @Override
  public Field<String> field3() {
    return Log.LOG.MESSAGE;
  }

  @Override
  public Field<Long> field4() {
    return Log.LOG.CREATE_TIME;
  }

  @Override
  public Long component1() {
    return getId();
  }

  @Override
  public Short component2() {
    return getType();
  }

  @Override
  public String component3() {
    return getMessage();
  }

  @Override
  public Long component4() {
    return getCreateTime();
  }

  @Override
  public Long value1() {
    return getId();
  }

  @Override
  public Short value2() {
    return getType();
  }

  @Override
  public String value3() {
    return getMessage();
  }

  @Override
  public Long value4() {
    return getCreateTime();
  }

  @Override
  public LogRecord value1(Long value) {
    setId(value);
    return this;
  }

  @Override
  public LogRecord value2(Short value) {
    setType(value);
    return this;
  }

  @Override
  public LogRecord value3(String value) {
    setMessage(value);
    return this;
  }

  // -------------------------------------------------------------------------
  // Constructors
  // -------------------------------------------------------------------------

  @Override
  public LogRecord value4(Long value) {
    setCreateTime(value);
    return this;
  }

  @Override
  public LogRecord values(Long value1, Short value2, String value3, Long value4) {
    value1(value1);
    value2(value2);
    value3(value3);
    value4(value4);
    return this;
  }
}
