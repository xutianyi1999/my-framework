/*
 * This file is generated by jOOQ.
 */
package club.koumakan.web.framework.dsl.tables;


import club.koumakan.web.framework.dsl.Indexes;
import club.koumakan.web.framework.dsl.Keys;
import club.koumakan.web.framework.dsl.Public;
import club.koumakan.web.framework.dsl.tables.records.DataDictionaryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = {
    "http://www.jooq.org",
    "jOOQ version:3.12.3"
  },
  comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class DataDictionary extends TableImpl<DataDictionaryRecord> {

  /**
   * The reference instance of <code>public.data_dictionary</code>
   */
  public static final DataDictionary DATA_DICTIONARY = new DataDictionary();
  private static final long serialVersionUID = 1511930396;
  /**
   * The column <code>public.data_dictionary.id</code>.
   */
  public final TableField<DataDictionaryRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('data_dictionary_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");
  /**
   * The column <code>public.data_dictionary.code</code>.
   */
  public final TableField<DataDictionaryRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");
  /**
   * The column <code>public.data_dictionary.name</code>.
   */
  public final TableField<DataDictionaryRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");
  /**
   * The column <code>public.data_dictionary.data</code>.
   */
  public final TableField<DataDictionaryRecord, JSONB> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.JSONB, this, "");

  /**
   * Create a <code>public.data_dictionary</code> table reference
   */
  public DataDictionary() {
    this(DSL.name("data_dictionary"), null);
  }

  /**
   * Create an aliased <code>public.data_dictionary</code> table reference
   */
  public DataDictionary(String alias) {
    this(DSL.name(alias), DATA_DICTIONARY);
  }

  /**
   * Create an aliased <code>public.data_dictionary</code> table reference
   */
  public DataDictionary(Name alias) {
    this(alias, DATA_DICTIONARY);
  }

  private DataDictionary(Name alias, Table<DataDictionaryRecord> aliased) {
    this(alias, aliased, null);
  }

  private DataDictionary(Name alias, Table<DataDictionaryRecord> aliased, Field<?>[] parameters) {
    super(alias, null, aliased, parameters, DSL.comment(""));
  }

  public <O extends Record> DataDictionary(Table<O> child, ForeignKey<O, DataDictionaryRecord> key) {
    super(child, key, DATA_DICTIONARY);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<DataDictionaryRecord> getRecordType() {
    return DataDictionaryRecord.class;
  }

  @Override
  public Schema getSchema() {
    return Public.PUBLIC;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.<Index>asList(Indexes.DATA_DICTIONARY_CODE_KEY, Indexes.DATA_DICTIONARY_NAME_KEY, Indexes.DATA_DICTIONARY_PKEY);
  }

  @Override
  public Identity<DataDictionaryRecord, Long> getIdentity() {
    return Keys.IDENTITY_DATA_DICTIONARY;
  }

  @Override
  public UniqueKey<DataDictionaryRecord> getPrimaryKey() {
    return Keys.DATA_DICTIONARY_PKEY;
  }

  @Override
  public List<UniqueKey<DataDictionaryRecord>> getKeys() {
    return Arrays.<UniqueKey<DataDictionaryRecord>>asList(Keys.DATA_DICTIONARY_PKEY, Keys.DATA_DICTIONARY_CODE_KEY, Keys.DATA_DICTIONARY_NAME_KEY);
  }

  @Override
  public DataDictionary as(String alias) {
    return new DataDictionary(DSL.name(alias), this);
  }

  @Override
  public DataDictionary as(Name alias) {
    return new DataDictionary(alias, this);
  }

  /**
   * Rename this table
   */
  @Override
  public DataDictionary rename(String name) {
    return new DataDictionary(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public DataDictionary rename(Name name) {
    return new DataDictionary(name, null);
  }

  // -------------------------------------------------------------------------
  // Row4 type methods
  // -------------------------------------------------------------------------

  @Override
  public Row4<Long, String, String, JSONB> fieldsRow() {
    return (Row4) super.fieldsRow();
  }
}
